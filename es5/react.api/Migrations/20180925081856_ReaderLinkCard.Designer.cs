// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using react.api.Models;

namespace react.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180925081856_ReaderLinkCard")]
    partial class ReaderLinkCard
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("react.api.Models.IdentityModels.AppRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("react.api.Models.IdentityModels.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("react.api.Models.IdentityModels.AppUserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Annotation");

                    b.Property<int>("Count");

                    b.Property<long?>("GenreId");

                    b.Property<string>("Name");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.LibraryCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ReaderId");

                    b.HasKey("Id");

                    b.HasIndex("ReaderId");

                    b.ToTable("LibraryCards");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.LibraryCardLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BookId");

                    b.Property<long?>("CardId");

                    b.Property<int>("Count");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CardId");

                    b.ToTable("LibraryCardLines");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.Reader", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Address");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("react.api.Models.IdentityModels.AppUserRole", b =>
                {
                    b.HasOne("react.api.Models.IdentityModels.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("react.api.Models.IdentityModels.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.Book", b =>
                {
                    b.HasOne("react.api.Models.LibraryModels.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.LibraryCard", b =>
                {
                    b.HasOne("react.api.Models.LibraryModels.Reader", "Reader")
                        .WithMany("Cards")
                        .HasForeignKey("ReaderId");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.LibraryCardLine", b =>
                {
                    b.HasOne("react.api.Models.LibraryModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("react.api.Models.LibraryModels.LibraryCard", "Card")
                        .WithMany("Books")
                        .HasForeignKey("CardId");
                });

            modelBuilder.Entity("react.api.Models.LibraryModels.Reader", b =>
                {
                    b.HasOne("react.api.Models.IdentityModels.AppUser", "User")
                        .WithOne("Reader")
                        .HasForeignKey("react.api.Models.LibraryModels.Reader", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
